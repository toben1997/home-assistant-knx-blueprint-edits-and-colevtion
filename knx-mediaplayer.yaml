blueprint:
  name: KNX - Media Player Control
  description: >
    Use KNX to control a Home Assistant media player entity with state feedback
    **Version**: 2024.01.1
  author: kalhimeo
  domain: automation
  input:
    media_player_entity:
      name: Media Player Entity
      description: >
        Choose the media player to control and expose with KNX
      selector:
        entity:
          domain: media_player
    power_address:
      name: Power group address
      description: >
        Group address for power control (0=off, 1=on). DPT 1.001
        Example: '1/0/1' (leave empty if unused)
      default: ""
    power_feedback_address:
      name: Power feedback group address
      description: >
        Group address to send feedback of the power state. DPT 1.001
        Example: '1/4/1' (leave empty if unused)
      default: ""
    previous_next_address:
      name: Previous/Next Song group address
      description: >
        Group address for previous/next song control (0=previous, 1=next). DPT 1.001
        Example: '1/0/2' (leave empty if unused)
      default: ""
    volume_address:
      name: Volume group address
      description: >
        Group address for volume control (0-255 for 0-100%). DPT 5.001
        Example: '1/0/3' (leave empty if unused)
      default: ""
    volume_feedback_address:
      name: Volume feedback group address
      description: >
        Group address to send feedback of the volume level (0-255 for 0-100%). DPT 5.001
        Example: '1/4/3' (leave empty if unused)
      default: ""
    play_pause_address:
      name: Play/Pause group address
      description: >
        Group address for play/pause control (0=pause, 1=play). DPT 1.001
        Example: '1/0/4' (leave empty if unused)
      default: ""
    play_pause_feedback_address:
      name: Play/Pause feedback group address
      description: >
        Group address to send feedback of the play/pause state. DPT 1.001
        Example: '1/4/4' (leave empty if unused)
      default: ""
    mute_address:
      name: Mute group address
      description: >
        Group address for mute control (0=unmute, 1=mute). DPT 1.001
        Example: '1/0/5' (leave empty if unused)
      default: ""
    mute_feedback_address:
      name: Mute feedback group address
      description: >
        Group address to send feedback of the mute state. DPT 1.001
        Example: '1/4/5' (leave empty if unused)
      default: ""
    volume_step_address:
      name: Volume Step group address
      description: >
        Group address for volume step control (0=step down, 1=step up). DPT 1.001
        Example: '1/0/6' (leave empty if unused)
      default: ""
    volume_step_size:
      name: Volume Step Size
      description: >
        Size of volume steps in percentage points (1-100)
      default: 5
      selector:
        number:
          min: 1
          max: 100
    source_address:
      name: Source group address
      description: >
        Group address for source selection (0-255 for different sources). DPT 5.001
        Example: '1/0/7' (leave empty if unused)
      default: ""
    source_feedback_address:
      name: Source feedback group address
      description: >
        Group address to send feedback of the source selection (0-255). DPT 5.001
        Example: '1/4/7' (leave empty if unused)
      default: ""
    source_1_value:
      name: Source 1 Value
      description: >
        KNX value for source 1 (e.g., 0)
      default: 0
    source_1_name:
      name: Source 1 Name
      description: >
        Media player source name for source 1 (e.g., Spotify)
      default: "Spotify"
    source_2_value:
      name: Source 2 Value
      description: >
        KNX value for source 2 (e.g., 1)
      default: 1
    source_2_name:
      name: Source 2 Name
      description: >
        Media player source name for source 2 (e.g., Bluetooth)
      default: "Bluetooth"
    source_3_value:
      name: Source 3 Value
      description: >
        KNX value for source 3 (e.g., 2)
      default: 2
    source_3_name:
      name: Source 3 Name
      description: >
        Media player source name for source 3 (e.g., Radio)
      default: "Radio"
    source_4_value:
      name: Source 4 Value
      description: >
        KNX value for source 4 (e.g., 3)
      default: 3
    source_4_name:
      name: Source 4 Name
      description: >
        Media player source name for source 4 (e.g., AUX)
      default: "AUX"
    source_5_value:
      name: Source 5 Value
      description: >
        KNX value for source 5 (e.g., 4)
      default: 4
    source_5_name:
      name: Source 5 Name
      description: >
        Media player source name for source 5 (e.g., USB)
      default: "USB"

mode: parallel
max_exceeded: silent

variables:
  media_player_entity: !input media_player_entity
  power_address: !input power_address
  power_feedback_address: !input power_feedback_address
  previous_next_address: !input previous_next_address
  volume_address: !input volume_address
  volume_feedback_address: !input volume_feedback_address
  play_pause_address: !input play_pause_address
  play_pause_feedback_address: !input play_pause_feedback_address
  mute_address: !input mute_address
  mute_feedback_address: !input mute_feedback_address
  volume_step_address: !input volume_step_address
  volume_step_size: !input volume_step_size
  source_address: !input source_address
  source_feedback_address: !input source_feedback_address
  source_1_value: !input source_1_value
  source_1_name: !input source_1_name
  source_2_value: !input source_2_value
  source_2_name: !input source_2_name
  source_3_value: !input source_3_value
  source_3_name: !input source_3_name
  source_4_value: !input source_4_value
  source_4_name: !input source_4_name
  source_5_value: !input source_5_value
  source_5_name: !input source_5_name

trigger:
  - platform: homeassistant
    event: start
    id: "initialize"
  - platform: event
    event_type: automation_reloaded
    id: "initialize"
  - platform: event
    event_type: service_registered
    event_data:
      domain: knx
      service: event_register
    id: "initialize"
  - platform: state
    entity_id: !input media_player_entity
    id: "media_player_entity"
  - platform: event
    event_type: knx_event
    event_data:
      destination: !input power_address
      telegramtype: GroupValueWrite
      direction: Incoming
    id: "power_address"
  - platform: event
    event_type: knx_event
    event_data:
      destination: !input power_feedback_address
      telegramtype: GroupValueRead
      direction: Incoming
    id: "power_feedback_address"
  - platform: event
    event_type: knx_event
    event_data:
      destination: !input previous_next_address
      telegramtype: GroupValueWrite
      direction: Incoming
    id: "previous_next_address"
  - platform: event
    event_type: knx_event
    event_data:
      destination: !input volume_address
      telegramtype: GroupValueWrite
      direction: Incoming
    id: "volume_address"
  - platform: event
    event_type: knx_event
    event_data:
      destination: !input volume_feedback_address
      telegramtype: GroupValueRead
      direction: Incoming
    id: "volume_feedback_address"
  - platform: event
    event_type: knx_event
    event_data:
      destination: !input play_pause_address
      telegramtype: GroupValueWrite
      direction: Incoming
    id: "play_pause_address"
  - platform: event
    event_type: knx_event
    event_data:
      destination: !input play_pause_feedback_address
      telegramtype: GroupValueRead
      direction: Incoming
    id: "play_pause_feedback_address"
  - platform: event
    event_type: knx_event
    event_data:
      destination: !input mute_address
      telegramtype: GroupValueWrite
      direction: Incoming
    id: "mute_address"
  - platform: event
    event_type: knx_event
    event_data:
      destination: !input mute_feedback_address
      telegramtype: GroupValueRead
      direction: Incoming
    id: "mute_feedback_address"
  - platform: event
    event_type: knx_event
    event_data:
      destination: !input volume_step_address
      telegramtype: GroupValueWrite
      direction: Incoming
    id: "volume_step_address"
  - platform: event
    event_type: knx_event
    event_data:
      destination: !input source_address
      telegramtype: GroupValueWrite
      direction: Incoming
    id: "source_address"
  - platform: event
    event_type: knx_event
    event_data:
      destination: !input source_feedback_address
      telegramtype: GroupValueRead
      direction: Incoming
    id: "source_feedback_address"

action:
  - choose:
    # INITIALIZE
    - conditions:
        - condition: trigger
          id: "initialize"
      sequence:
        # POWER
        - if:
            - condition: template
              value_template: "{{ power_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ power_address }}"
        - if:
            - condition: template
              value_template: "{{ power_feedback_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ power_feedback_address }}"
        # PREVIOUS/NEXT SONG
        - if:
            - condition: template
              value_template: "{{ previous_next_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ previous_next_address }}"
        # VOLUME
        - if:
            - condition: template
              value_template: "{{ volume_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ volume_address }}"
        - if:
            - condition: template
              value_template: "{{ volume_feedback_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ volume_feedback_address }}"
        # PLAY/PAUSE
        - if:
            - condition: template
              value_template: "{{ play_pause_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ play_pause_address }}"
        - if:
            - condition: template
              value_template: "{{ play_pause_feedback_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ play_pause_feedback_address }}"
        # MUTE
        - if:
            - condition: template
              value_template: "{{ mute_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ mute_address }}"
        - if:
            - condition: template
              value_template: "{{ mute_feedback_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ mute_feedback_address }}"
        # VOLUME STEP
        - if:
            - condition: template
              value_template: "{{ volume_step_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ volume_step_address }}"
        # SOURCE
        - if:
            - condition: template
              value_template: "{{ source_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ source_address }}"
        - if:
            - condition: template
              value_template: "{{ source_feedback_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ source_feedback_address }}"

    # KNX TELEGRAMS
    - conditions:
        condition: template
        value_template: "{{ trigger is defined and trigger.platform == 'event' and trigger.event.event_type == 'knx_event' and trigger.event.data.direction == 'Incoming' and trigger.event.data.destination != '' }}"
      sequence:
        - choose:
          # POWER command
          - conditions:
              - condition: trigger
                id: "power_address"
              - condition: template
                value_template: "{{ power_address != '' }}"
            sequence:
              - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data | int(default=0) == 0 }}"
                  sequence:
                    - service: media_player.turn_off
                      target:
                        entity_id: "{{ media_player_entity }}"
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data | int(default=0) == 1 }}"
                  sequence:
                    - service: media_player.turn_on
                      target:
                        entity_id: "{{ media_player_entity }}"
          # PREVIOUS/NEXT SONG command
          - conditions:
              - condition: trigger
                id: "previous_next_address"
              - condition: template
                value_template: "{{ previous_next_address != '' }}"
            sequence:
              - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data | int(default=0) == 0 }}"
                  sequence:
                    - service: media_player.media_previous_track
                      target:
                        entity_id: "{{ media_player_entity }}"
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data | int(default=0) == 1 }}"
                  sequence:
                    - service: media_player.media_next_track
                      target:
                        entity_id: "{{ media_player_entity }}"
          # VOLUME command
          - conditions:
              - condition: trigger
                id: "volume_address"
              - condition: template
                value_template: "{{ volume_address != '' }}"
            sequence:
              - service: media_player.volume_set
                target:
                  entity_id: "{{ media_player_entity }}"
                data:
                  volume_level: "{{ (trigger.event.data.data | int(default=0) / 255) | float }}"
          # PLAY/PAUSE command
          - conditions:
              - condition: trigger
                id: "play_pause_address"
              - condition: template
                value_template: "{{ play_pause_address != '' }}"
            sequence:
              - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data | int(default=0) == 0 }}"
                  sequence:
                    - service: media_player.media_pause
                      target:
                        entity_id: "{{ media_player_entity }}"
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data | int(default=0) == 1 }}"
                  sequence:
                    - service: media_player.media_play
                      target:
                        entity_id: "{{ media_player_entity }}"
          # MUTE command
          - conditions:
              - condition: trigger
                id: "mute_address"
              - condition: template
                value_template: "{{ mute_address != '' }}"
            sequence:
              - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data | int(default=0) == 0 }}"
                  sequence:
                    - service: media_player.volume_mute
                      target:
                        entity_id: "{{ media_player_entity }}"
                      data:
                        is_volume_muted: false
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data | int(default=0) == 1 }}"
                  sequence:
                    - service: media_player.volume_mute
                      target:
                        entity_id: "{{ media_player_entity }}"
                      data:
                        is_volume_muted: true
          # VOLUME STEP command
          - conditions:
              - condition: trigger
                id: "volume_step_address"
              - condition: template
                value_template: "{{ volume_step_address != '' }}"
            sequence:
              - service: media_player.volume_set
                target:
                  entity_id: "{{ media_player_entity }}"
                data:
                  volume_level: >
                    {{ [
                      0, [
                        1.0,
                        states(media_player_entity) | float + (volume_step_size / 100.0) * (1 if trigger.event.data.data | int(default=0) == 1 else -1)
                      ] | min
                    ] | max }}
          # SOURCE command
          - conditions:
              - condition: trigger
                id: "source_address"
              - condition: template
                value_template: "{{ source_address != '' }}"
            sequence:
              - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data | int(default=0) == source_1_value }}"
                  sequence:
                    - service: media_player.select_source
                      target:
                        entity_id: "{{ media_player_entity }}"
                      data:
                        source: "{{ source_1_name }}"
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data | int(default=0) == source_2_value }}"
                  sequence:
                    - service: media_player.select_source
                      target:
                        entity_id: "{{ media_player_entity }}"
                      data:
                        source: "{{ source_2_name }}"
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data | int(default=0) == source_3_value }}"
                  sequence:
                    - service: media_player.select_source
                      target:
                        entity_id: "{{ media_player_entity }}"
                      data:
                        source: "{{ source_3_name }}"
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data | int(default=0) == source_4_value }}"
                  sequence:
                    - service: media_player.select_source
                      target:
                        entity_id: "{{ media_player_entity }}"
                      data:
                        source: "{{ source_4_name }}"
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data | int(default=0) == source_5_value }}"
                  sequence:
                    - service: media_player.select_source
                      target:
                        entity_id: "{{ media_player_entity }}"
                      data:
                        source: "{{ source_5_name }}"

    # KNX READ
    - conditions:
        condition: template
        value_template: "{{ trigger is defined and trigger.platform == 'event' and trigger.event.event_type == 'knx_event' and trigger.event.data.direction == 'Incoming' and trigger.event.data.telegramtype == 'GroupValueRead' and trigger.event.data.destination != '' }}"
      sequence:
        - choose:
          # POWER read
          - conditions:
              - condition: trigger
                id: "power_feedback_address"
              - condition: template
                value_template: "{{ power_feedback_address != '' }}"
            sequence:
              - if:
                  - condition: or
                    conditions:
                      - condition: state
                        entity_id: !input media_player_entity
                        state: "off"
                      - condition: state
                        entity_id: !input media_player_entity
                        state: "unavailable"
                      - condition: state
                        entity_id: !input media_player_entity
                        state: "unknown"
                then:
                  - service: knx.send
                    data:
                      address: "{{ power_feedback_address }}"
                      payload: 0
                      response: true
                else:
                  - service: knx.send
                    data:
                      address: "{{ power_feedback_address }}"
                      payload: 1
                      response: true
          # VOLUME read
          - conditions:
              - condition: trigger
                id: "volume_feedback_address"
              - condition: template
                value_template: "{{ volume_feedback_address != '' }}"
            sequence:
              - service: knx.send
                data:
                  address: "{{ volume_feedback_address }}"
                  payload: "{{ (state_attr(media_player_entity, 'volume_level') * 255) | int }}"
                  response: true
          # PLAY/PAUSE read
          - conditions:
              - condition: trigger
                id: "play_pause_feedback_address"
              - condition: template
                value_template: "{{ play_pause_feedback_address != '' }}"
            sequence:
              - if:
                  - condition: state
                    entity_id: !input media_player_entity
                    state: "playing"
                then:
                  - service: knx.send
                    data:
                      address: "{{ play_pause_feedback_address }}"
                      payload: 1
                      response: true
                else:
                  - service: knx.send
                    data:
                      address: "{{ play_pause_feedback_address }}"
                      payload: 0
                      response: true
          # MUTE read
          - conditions:
              - condition: trigger
                id: "mute_feedback_address"
              - condition: template
                value_template: "{{ mute_feedback_address != '' }}"
            sequence:
              - if:
                  - condition: template
                    value_template: "{{ state_attr(media_player_entity, 'is_volume_muted') == true }}"
                then:
                  - service: knx.send
                    data:
                      address: "{{ mute_feedback_address }}"
                      payload: 1
                      response: true
                else:
                  - service: knx.send
                    data:
                      address: "{{ mute_feedback_address }}"
                      payload: 0
                      response: true
          # SOURCE read
          - conditions:
              - condition: trigger
                id: "source_feedback_address"
              - condition: template
                value_template: "{{ source_feedback_address != '' }}"
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ state_attr(media_player_entity, 'source') == source_1_name }}"
                    sequence:
                      - service: knx.send
                        data:
                          address: "{{ source_feedback_address }}"
                          payload: "{{ source_1_value }}"
                          response: true
                  - conditions:
                      - condition: template
                        value_template: "{{ state_attr(media_player_entity, 'source') == source_2_name }}"
                    sequence:
                      - service: knx.send
                        data:
                          address: "{{ source_feedback_address }}"
                          payload: "{{ source_2_value }}"
                          response: true
                  - conditions:
                      - condition: template
                        value_template: "{{ state_attr(media_player_entity, 'source') == source_3_name }}"
                    sequence:
                      - service: knx.send
                        data:
                          address: "{{ source_feedback_address }}"
                          payload: "{{ source_3_value }}"
                          response: true
                  - conditions:
                      - condition: template
                        value_template: "{{ state_attr(media_player_entity, 'source') == source_4_name }}"
                    sequence:
                      - service: knx.send
                        data:
                          address: "{{ source_feedback_address }}"
                          payload: "{{ source_4_value }}"
                          response: true
                  - conditions:
                      - condition: template
                        value_template: "{{ state_attr(media_player_entity, 'source') == source_5_name }}"
                    sequence:
                      - service: knx.send
                        data:
                          address: "{{ source_feedback_address }}"
                          payload: "{{ source_5_value }}"
                          response: true

    # STATE FEEDBACK
    - conditions:
        - condition: trigger
          id: "media_player_entity"
        - condition: template
          value_template: "{{ media_player_entity != '' }}"
      sequence:
        # POWER change
        - if:
            - condition: template
              value_template: "{{ trigger.to_state.state != trigger.from_state.state }}"
            - condition: template
              value_template: "{{ power_feedback_address != '' }}"
          then:
            - choose :
              - conditions:
                  condition: template
                  value_template: "{{ trigger.to_state.state == 'off' }}"
                sequence:
                  - service: knx.send
                    data:
                      address: "{{ power_feedback_address }}"
                      payload: 0
              - conditions:
                  condition: template
                  value_template: "{{ trigger.to_state.state == 'on' }}"
                sequence:
                  - service: knx.send
                    data:
                      address: "{{ power_feedback_address }}"
                      payload: 1
        # VOLUME change
        - if:
            - condition: template
              value_template: "{{ volume_feedback_address != '' }}"
            - condition: template
              value_template: "{{ trigger.to_state.attributes.volume_level != trigger.from_state.attributes.volume_level }}"
          then:
            - service: knx.send
              data:
                address: "{{ volume_feedback_address }}"
                payload: "{{ (trigger.to_state.attributes.volume_level * 255) | int }}"
        # PLAY/PAUSE change
        - if:
            - condition: template
              value_template: "{{ play_pause_feedback_address != '' }}"
            - condition: template
              value_template: "{{ trigger.to_state.state != trigger.from_state.state }}"
          then:
            - choose:
                - conditions:
                    condition: template
                    value_template: "{{ trigger.to_state.state == 'playing' }}"
                  sequence:
                    - service: knx.send
                      data:
                        address: "{{ play_pause_feedback_address }}"
                        payload: 1
                - conditions:
                    condition: template
                    value_template: "{{ trigger.to_state.state != 'playing' }}"
                  sequence:
                    - service: knx.send
                      data:
                        address: "{{ play_pause_feedback_address }}"
                        payload: 0
        # MUTE change
        - if:
            - condition: template
              value_template: "{{ mute_feedback_address != '' }}"
            - condition: template
              value_template: "{{ trigger.to_state.attributes.is_volume_muted != trigger.from_state.attributes.is_volume_muted }}"
          then:
            - choose:
                - conditions:
                    condition: template
                    value_template: "{{ trigger.to_state.attributes.is_volume_muted == true }}"
                  sequence:
                    - service: knx.send
                      data:
                        address: "{{ mute_feedback_address }}"
                        payload: 1
                - conditions:
                    condition: template
                    value_template: "{{ trigger.to_state.attributes.is_volume_muted == false }}"
                  sequence:
                    - service: knx.send
                      data:
                        address: "{{ mute_feedback_address }}"
                        payload: 0
        # SOURCE change
        - if:
            - condition: template
              value_template: "{{ source_feedback_address != '' }}"
            - condition: template
              value_template: "{{ trigger.to_state.attributes.source != trigger.from_state.attributes.source }}"
          then:
            - choose:
                - conditions:
                    condition: template
                    value_template: "{{ trigger.to_state.attributes.source == source_1_name }}"
                  sequence:
                    - service: knx.send
                      data:
                        address: "{{ source_feedback_address }}"
                        payload: "{{ source_1_value }}"
                - conditions:
                    condition: template
                    value_template: "{{ trigger.to_state.attributes.source == source_2_name }}"
                  sequence:
                    - service: knx.send
                      data:
                        address: "{{ source_feedback_address }}"
                        payload: "{{ source_2_value }}"
                - conditions:
                    condition: template
                    value_template: "{{ trigger.to_state.attributes.source == source_3_name }}"
                  sequence:
                    - service: knx.send
                      data:
                        address: "{{ source_feedback_address }}"
                        payload: "{{ source_3_value }}"
                - conditions:
                    condition: template
                    value_template: "{{ trigger.to_state.attributes.source == source_4_name }}"
                  sequence:
                    - service: knx.send
                      data:
                        address: "{{ source_feedback_address }}"
                        payload: "{{ source_4_value }}"
                - conditions:
                    condition: template
                    value_template: "{{ trigger.to_state.attributes.source == source_5_name }}"
                  sequence:
                    - service: knx.send
                      data:
                        address: "{{ source_feedback_address }}"
                        payload: "{{ source_5_value }}"
