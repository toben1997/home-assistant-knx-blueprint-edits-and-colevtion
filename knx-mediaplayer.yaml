blueprint:
  name: KNX - Media Player control with source selection
  description: |
    Use KNX to control a Home Assistant media player entity with specified group addresses. Optionally invert the next/previous song commands and configure source selection.
    **Version**: 2024.01.5
  author: kalhimeo
  domain: automation
  input:
    media_player_entity:
      name: Media Player Entity
      description: Choose the media player to control and expose with KNX
      selector:
        entity:
          domain: media_player
    next_prev_address:
      name: Next/Previous Song group address
      description: Group address for next and previous song control. DPT 1.001. Use 1 for next and 0 for previous.
      default: ""
    volume_value_address:
      name: Volume Value group address
      description: Group address for setting the volume value. DPT 5.001
      default: ""
    volume_feedback_address:
      name: Volume Feedback group address
      description: Group address for sending volume feedback. DPT 5.001
      default: ""
    play_pause_address:
      name: Play/Pause group address
      description: Group address for play/pause control. DPT 1.001
      default: ""
    play_pause_feedback_address:
      name: Play/Pause Feedback group address
      description: Group address for sending play/pause feedback. DPT 1.001
      default: ""
    mute_address:
      name: Mute group address
      description: Group address for mute control. DPT 1.001
      default: ""
    mute_feedback_address:
      name: Mute Feedback group address
      description: Group address for sending mute feedback. DPT 1.001
      default: ""
    source_address:
      name: Source group address
      description: Group address for source selection. DPT 5.001 (1 byte)
      default: ""
    source_feedback_address:
      name: Source Feedback group address
      description: Group address for sending source feedback. DPT 5.001
      default: ""
    volume_step_address:
      name: Volume Step group address
      description: Group address for volume up/down control. DPT 1.001
      default: ""
    source_1_knx_value:
      name: Source 1 KNX Value
      description: KNX value for selecting source 1.
      default: 1
      selector:
        number:
          min: 1
          max: 255
          step: 1
    source_1_name:
      name: Source 1 Name
      description: Media player source name for source 1.
      default: "Source 1"
    source_2_knx_value:
      name: Source 2 KNX Value
      description: KNX value for selecting source 2.
      default: 2
      selector:
        number:
          min: 1
          max: 255
          step: 1
    source_2_name:
      name: Source 2 Name
      description: Media player source name for source 2.
      default: "Source 2"
    source_3_knx_value:
      name: Source 3 KNX Value
      description: KNX value for selecting source 3.
      default: 3
      selector:
        number:
          min: 1
          max: 255
          step: 1
    source_3_name:
      name: Source 3 Name
      description: Media player source name for source 3.
      default: "Source 3"
    source_4_knx_value:
      name: Source 4 KNX Value
      description: KNX value for selecting source 4.
      default: 4
      selector:
        number:
          min: 1
          max: 255
          step: 1
    source_4_name:
      name: Source 4 Name
      description: Media player source name for source 4.
      default: "Source 4"
    source_5_knx_value:
      name: Source 5 KNX Value
      description: KNX value for selecting source 5.
      default: 5
      selector:
        number:
          min: 1
          max: 255
          step: 1
    source_5_name:
      name: Source 5 Name
      description: Media player source name for source 5.
      default: "Source 5"
    invert_next_prev:
      name: Invert Next/Previous
      description: Invert the next and previous song commands.
      default: false
      selector:
        boolean: {}

mode: parallel
max_exceeded: silent

variables:
  media_player_entity: !input media_player_entity
  next_prev_address: !input next_prev_address
  volume_value_address: !input volume_value_address
  volume_feedback_address: !input volume_feedback_address
  play_pause_address: !input play_pause_address
  play_pause_feedback_address: !input play_pause_feedback_address
  mute_address: !input mute_address
  mute_feedback_address: !input mute_feedback_address
  source_address: !input source_address
  source_feedback_address: !input source_feedback_address
  volume_step_address: !input volume_step_address
  source_1_knx_value: !input source_1_knx_value
  source_1_name: !input source_1_name
  source_2_knx_value: !input source_2_knx_value
  source_2_name: !input source_2_name
  source_3_knx_value: !input source_3_knx_value
  source_3_name: !input source_3_name
  source_4_knx_value: !input source_4_knx_value
  source_4_name: !input source_4_name
  source_5_knx_value: !input source_5_knx_value
  source_5_name: !input source_5_name
  invert_next_prev: !input invert_next_prev

trigger:
  - platform: homeassistant
    event: start
    id: "initialize"
  - platform: event
    event_type: automation_reloaded
    id: "initialize"
  - platform: event
    event_type: service_registered
    event_data:
      domain: knx
      service: event_register
    id: "initialize"
  - platform: state
    entity_id: !input media_player_entity
    id: "media_player_entity"
  - platform: event
    event_type: knx_event
    event_data:
      telegramtype: GroupValueWrite
      direction: Incoming
    id: "knx_event"

action:
  - choose:
    # INITIALIZE
    - conditions:
        - condition: trigger
          id: "initialize"
      sequence:
        - if:
            - condition: template
              value_template: "{{ next_prev_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ next_prev_address }}"
        - if:
            - condition: template
              value_template: "{{ volume_value_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ volume_value_address }}"
        - if:
            - condition: template
              value_template: "{{ volume_feedback_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ volume_feedback_address }}"
        - if:
            - condition: template
              value_template: "{{ play_pause_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ play_pause_address }}"
        - if:
            - condition: template
              value_template: "{{ play_pause_feedback_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ play_pause_feedback_address }}"
        - if:
            - condition: template
              value_template: "{{ mute_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ mute_address }}"
        - if:
            - condition: template
              value_template: "{{ mute_feedback_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ mute_feedback_address }}"
        - if:
            - condition: template
              value_template: "{{ source_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ source_address }}"
        - if:
            - condition: template
              value_template: "{{ source_feedback_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ source_feedback_address }}"
        - if:
            - condition: template
              value_template: "{{ volume_step_address != '' }}"
          then:
            - service: knx.event_register
              data:
                address: "{{ volume_step_address }}"

    # KNX TELEGRAMS
    - conditions:
        - condition: template
          value_template: "{{ trigger is defined and trigger.platform == 'event' and trigger.event.event_type == 'knx_event' and trigger.event.data.direction == 'Incoming' and trigger.event.data.destination != '' }}"
      sequence:
        - choose:
          # NEXT/PREVIOUS SONG
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.destination == next_prev_address }}"
            sequence:
              - choose:
                - conditions:
                    - condition: template
                      value_template: >
                        {% if invert_next_prev %}
                          {{ trigger.event.data.data == 1 }}
                        {% else %}
                          {{ trigger.event.data.data == 0 }}
                        {% endif %}
                  sequence:
                    - service: media_player.media_previous_track
                      target:
                        entity_id: "{{ media_player_entity }}"
                - conditions:
                    - condition: template
                      value_template: >
                        {% if invert_next_prev %}
                          {{ trigger.event.data.data == 0 }}
                        {% else %}
                          {{ trigger.event.data.data == 1 }}
                        {% endif %}
                  sequence:
                    - service: media_player.media_next_track
                      target:
                        entity_id: "{{ media_player_entity }}"
          # VOLUME VALUE
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.destination == volume_value_address }}"
            sequence:
              - service: media_player.volume_set
                target:
                  entity_id: "{{ media_player_entity }}"
                data:
                  volume_level: "{{ trigger.event.data.data / 100 }}"
          # PLAY/PAUSE
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.destination == play_pause_address }}"
            sequence:
              - service: media_player.media_play_pause
                target:
                  entity_id: "{{ media_player_entity }}"
          # MUTE
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.destination == mute_address }}"
            sequence:
              - service: media_player.volume_mute
                target:
                  entity_id: "{{ media_player_entity }}"
                data:
                  is_volume_muted: "{{ trigger.event.data.data == 1 }}"
          # SOURCE SELECTION
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.destination == source_address }}"
            sequence:
              - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data == source_1_knx_value }}"
                  sequence:
                    - service: media_player.select_source
                      target:
                        entity_id: "{{ media_player_entity }}"
                      data:
                        source: "{{ source_1_name }}"
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data == source_2_knx_value }}"
                  sequence:
                    - service: media_player.select_source
                      target:
                        entity_id: "{{ media_player_entity }}"
                      data:
                        source: "{{ source_2_name }}"
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data == source_3_knx_value }}"
                  sequence:
                    - service: media_player.select_source
                      target:
                        entity_id: "{{ media_player_entity }}"
                      data:
                        source: "{{ source_3_name }}"
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data == source_4_knx_value }}"
                  sequence:
                    - service: media_player.select_source
                      target:
                        entity_id: "{{ media_player_entity }}"
                      data:
                        source: "{{ source_4_name }}"
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data == source_5_knx_value }}"
                  sequence:
                    - service: media_player.select_source
                      target:
                        entity_id: "{{ media_player_entity }}"
                      data:
                        source: "{{ source_5_name }}"
          # VOLUME STEP
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.destination == volume_step_address }}"
            sequence:
              - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data == 1 }}"
                  sequence:
                    - service: media_player.volume_up
                      target:
                        entity_id: "{{ media_player_entity }}"
                - conditions:
                    - condition: template
                      value_template: "{{ trigger.event.data.data == 0 }}"
                  sequence:
                    - service: media_player.volume_down
                      target:
                        entity_id: "{{ media_player_entity }}"

    # MEDIA PLAYER STATE CHANGES
    - conditions:
        - condition: template
          value_template: "{{ trigger is defined and trigger.platform == 'state' and trigger.entity_id == media_player_entity }}"
      sequence:
        - choose:
          # VOLUME FEEDBACK
          - conditions:
              - condition: template
                value_template: "{{ volume_feedback_address != '' }}"
            sequence:
              - service: knx.send
                data:
                  address: "{{ volume_feedback_address }}"
                  payload: "{{ (state_attr(media_player_entity, 'volume_level') | float * 100) | int }}"
                  type: 'percent'
          # PLAY/PAUSE FEEDBACK
          - conditions:
              - condition: template
                value_template: "{{ play_pause_feedback_address != '' }}"
            sequence:
              - service: knx.send
                data:
                  address: "{{ play_pause_feedback_address }}"
                  payload: "{{ 1 if is_state(media_player_entity, 'playing') else 0 }}"
                  type: 'percent'
          # MUTE FEEDBACK
          - conditions:
              - condition: template
                value_template: "{{ mute_feedback_address != '' }}"
            sequence:
              - service: knx.send
                data:
                  address: "{{ mute_feedback_address }}"
                  payload: "{{ 1 if state_attr(media_player_entity, 'is_volume_muted') else 0 }}"
                  type: 'percent'
          # SOURCE FEEDBACK
          - conditions:
              - condition: template
                value_template: "{{ source_feedback_address != '' }}"
            sequence:
              - service: knx.send
                data:
                  address: "{{ source_feedback_address }}"
                  payload_template: >
                    {% if state_attr(media_player_entity, 'source') == source_1_name %}
                      {{ source_1_knx_value }}
                    {% elif state_attr(media_player_entity, 'source') == source_2_name %}
                      {{ source_2_knx_value }}
                    {% elif state_attr(media_player_entity, 'source') == source_3_name %}
                      {{ source_3_knx_value }}
                    {% elif state_attr(media_player_entity, 'source') == source_4_name %}
                      {{ source_4_knx_value }}
                    {% elif state_attr(media_player_entity, 'source') == source_5_name %}
                      {{ source_5_knx_value }}
                    {% else %}
                      0
                    {% endif %}
                  type: 'percent'
